; compiled from tags\rasterizer\pixel_shaders_dx9\shaders_shader_passes_prt_prt_simple_0.txt
;
#const C1.rgb= $specular_tint
#ifndef DX11
sampler2D s0 : register(s0);
sampler2D s1 : register(s1);
samplerCUBE s2 : register(s2);
samplerCUBE s3 : register(s3);
#else // DX11
SamplerState s0 : register(s0);
Texture2D s0tex : register(t0);
SamplerState s1 : register(s1);
Texture2D s1tex : register(t1);
SamplerState s2 : register(s2);
TextureCube s2tex : register(t2);
SamplerState s3 : register(s3);
TextureCube s3tex : register(t3);
#endif // DX11
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef DX11
    float4 pos_unused : SV_POSITION,
#endif
    float4 color0 : COLOR0,
    float4 color1 : COLOR1,
#ifdef DX11
    float4 tc0 : TEXCOORD0,
    float4 tc1 : TEXCOORD1,
    float4 tc2 : TEXCOORD2,
    float4 tc3 : TEXCOORD3,
    float4 tc4 : TEXCOORD4,
    float4 tc5 : TEXCOORD5,
    float4 tc6 : TEXCOORD6,
    float4 tc7 : TEXCOORD7,
    float fog  : FOG
#else
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7
#endif // DX11
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
#ifndef DX11
    float4 tex0= tex2Dproj(s0, tc0);
#else
    float4 tex0= s0tex.Sample(s0, tc0.xy/tc0.w);
#endif // DX11
// texture stage 1 mode 0 dot 0 input-stage 0
#ifndef DX11
    float4 tex1= tex2Dproj(s1, tc1);
#else
    float4 tex1= s1tex.Sample(s1, tc1.xy/tc1.w);
#endif // DX11
// texture stage 2 mode 2 dot 0 input-stage 0
#ifndef DX11
    float4 tex2= texCUBE(s2, tc2);
#else
    float4 tex2= s2tex.Sample(s2, tc2.xyz);
#endif // DX11
// texture stage 3 mode 2 dot 0 input-stage 0
#ifndef DX11
    float4 tex3= texCUBE(s3, tc3);
#else
    float4 tex3= s3tex.Sample(s3, tc3.xyz);
#endif // DX11
    // exp.components=1 term=1
    // line 14: R0= EXPAND(T1).EXPAND(D1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex1.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(color1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    // exp.components=1 term=1
    // line 15: R1= EXPAND(T1).EXPAND(T3)
    float temp6;
    float3 temp7;
    temp7= 2 * saturate(tex1.rgb) - 1;
    float3 temp8;
    float3 temp9;
    temp9= 2 * saturate(tex3.rgb) - 1;
    float3 temp10;
    float temp11;
    temp11= dot(temp7, temp9);
    temp6= temp11;
    // exp.components=1 term=1
    // line 16: R0a= EXPAND(D1b)
    float temp12;
    float temp13;
    temp13= 2 * saturate(color1.b) - 1;
    float3 temp14;
    temp12= temp13;
    // exp.components=1 term=1
    // line 17: R1a= EXPAND(T3b)
    float temp15;
    float temp16;
    temp16= 2 * saturate(tex3.b) - 1;
    float3 temp17;
    temp15= temp16;
    r0.rgb= clamp(temp0,-1,+1);
    r1.rgb= clamp(temp6,-1,+1);
    r0.a= clamp(temp12,-1,+1);
    r1.a= clamp(temp15,-1,+1);
    // exp.components=1 term=1 term=1
    // line 19: R0a= SIGNED(R0b)-SIGNED(R0a)
    float temp18;
    float temp19;
    float temp20;
    float temp21;
    temp21= r0.b;
    float3 temp22;
    temp19= temp21;
    float temp23;
    temp23= r0.a;
    float3 temp24;
    temp20= temp23;
    temp18= temp19 - temp20;
    r0.a= clamp(temp18,-1,+1);
    // exp.components=3 term=3 term=3
    // line 21: R0= T2+T2*SIGNED(R0a)
    float3 temp25;
    float3 temp26;
    float3 temp27;
    float3 temp28;
    temp28= saturate(tex2.rgb);
    float3 temp29;
    temp26= temp28;
    float3 temp30;
    temp30= saturate(tex2.rgb);
    float3 temp31;
    float temp32;
    temp32= r0.a;
    float3 temp33;
    float3 temp34;
    temp34= temp30 * temp32;
    temp27= temp34;
    temp25= temp26 + temp27;
    // exp.components=1 term=1 term=1
    // line 22: R1a= SIGNED(R1b)-SIGNED(R1a)
    float temp35;
    float temp36;
    float temp37;
    float temp38;
    temp38= r1.b;
    float3 temp39;
    temp36= temp38;
    float temp40;
    temp40= r1.a;
    float3 temp41;
    temp37= temp40;
    temp35= temp36 - temp37;
    r0.rgb= clamp(temp25,-1,+1);
    r1.a= clamp(temp35,-1,+1);
    // exp.components=3 term=3 term=3
    // line 24: R1= D0+D0*SIGNED(R1a)
    float3 temp42;
    float3 temp43;
    float3 temp44;
    float3 temp45;
    temp45= saturate(color0.rgb);
    float3 temp46;
    temp43= temp45;
    float3 temp47;
    temp47= saturate(color0.rgb);
    float3 temp48;
    float temp49;
    temp49= r1.a;
    float3 temp50;
    float3 temp51;
    temp51= temp47 * temp49;
    temp44= temp51;
    temp42= temp43 + temp44;
    // exp.components=1 term=1
    // line 25: R0a= T0a*D0a
    float temp52;
    float temp53;
    temp53= saturate(tex0.a);
    float3 temp54;
    float temp55;
    temp55= saturate(color0.a);
    float3 temp56;
    float temp57;
    temp57= temp53 * temp55;
    temp52= temp57;
    r1.rgb= clamp(temp42,-1,+1);
    r0.a= clamp(temp52,-1,+1);
    // exp.components=3 term=3
    // line 27: R1= OUT_SCALE_BY_2(R1*T0)
    float3 temp58;
    float3 temp59;
    temp59= saturate(r1.rgb);
    float3 temp60;
    float3 temp61;
    temp61= saturate(tex0.rgb);
    float3 temp62;
    float3 temp63;
    temp63= temp59 * temp61;
    temp58= temp63;
    temp58= 2 * temp58;
    // exp.components=3 term=3
    // line 28: R0= R0*R0a
    float3 temp64;
    float3 temp65;
    temp65= saturate(r0.rgb);
    float3 temp66;
    float temp67;
    temp67= saturate(r0.a);
    float3 temp68;
    float3 temp69;
    temp69= temp65 * temp67;
    temp64= temp69;
    temp64= 2 * temp64;
    r1.rgb= clamp(temp58,-1,+1);
    r0.rgb= clamp(temp64,-1,+1);
    // exp.components=3 term=3 term=3
    // line 31: SRCCOLOR= R0*C0+R1
    float3 temp70;
    float3 temp71;
    float3 temp72;
    float3 temp73;
    temp73= saturate(r0.rgb);
    float3 temp74;
    float3 temp75;
    temp75= c1.rgb;
    float3 temp76;
    float3 temp77;
    temp77= temp73 * temp75;
    temp71= temp77;
    float3 temp78;
    temp78= saturate(r1.rgb);
    float3 temp79;
    temp72= temp78;
    temp70= temp71 + temp72;
    // exp.components=1 term=1
    // line 32: SRCALPHA= R0a
    float temp80;
    float temp81;
    temp81= saturate(r0.a);
    float3 temp82;
    temp80= temp81;
    r0.rgb= temp70;
    r0.a= temp80;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifdef ALPHA_TEST
#ifdef ALPHA_TEST_NOT_EQUAL
    clip(any(r0.a - ALPHA_TEST) - 0.5f);    
#elif ALPHA_TEST_GREATER
    clip(r0.a - ALPHA_TEST);        
    clip(any(r0.a - ALPHA_TEST) - 0.5f);    
#elif ALPHA_TEST_LESS
    clip(ALPHA_TEST - r0.a);
    clip(any(r0.a - ALPHA_TEST) - 0.5f);    
#endif
#endif // ALPHA_TEST

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
