; compiled from tags\rasterizer\pixel_shaders_dx9\shaders_shader_passes_lightmap_lightmap_tex_detail_no_specular_0.txt
;
#ifndef DX11
sampler2D s0 : register(s0);
sampler2D s1 : register(s1);
sampler2D s2 : register(s2);
sampler2D s3 : register(s3);
#else // DX11
SamplerState s0 : register(s0);
Texture2D s0tex : register(t0);
SamplerState s1 : register(s1);
Texture2D s1tex : register(t1);
SamplerState s2 : register(s2);
Texture2D s2tex : register(t2);
SamplerState s3 : register(s3);
Texture2D s3tex : register(t3);
#endif // DX11
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 zwriteout : register(c16);
struct MRT_return
{
    float4 color :COLOR0;
    float4 depth :COLOR1;
};
#ifndef MRT
float4 main(
#else
MRT_return main(
#endif
#ifdef DX11
    float4 pos_unused : SV_POSITION,
#endif
    float4 color0 : COLOR0,
    float4 color1 : COLOR1,
#ifdef DX11
    float4 tc0 : TEXCOORD0,
    float4 tc1 : TEXCOORD1,
    float4 tc2 : TEXCOORD2,
    float4 tc3 : TEXCOORD3,
    float4 tc4 : TEXCOORD4,
    float4 tc5 : TEXCOORD5,
    float4 tc6 : TEXCOORD6,
    float4 tc7 : TEXCOORD7
#else
#ifdef CENTROID0
    float4 tc0 : TEXCOORD0_centroid,
#else
    float4 tc0 : TEXCOORD0,
#endif
#ifdef CENTROID1
    float4 tc1 : TEXCOORD1_centroid,
#else
    float4 tc1 : TEXCOORD1,
#endif
#ifdef CENTROID2
    float4 tc2 : TEXCOORD2_centroid,
#else
    float4 tc2 : TEXCOORD2,
#endif
#ifdef CENTROID3
    float4 tc3 : TEXCOORD3_centroid,
#else
    float4 tc3 : TEXCOORD3,
#endif
    float4 tc7:TEXCOORD7
#endif // DX11
)
#ifndef MRT
    : COLOR
#endif
{
    float4 r0, r1;
    float3 e, f;
    r0.r= r0.g= r0.b= 0;
    r0.a= 1;
    float4 tex4;
    float4 tex5;
    float4 tex6;
    float4 tex7;
// texture stage 0 mode 0 dot 0 input-stage 0
#ifndef DX11
    float4 tex0= tex2Dproj(s0, tc0);
#else
    float4 tex0= s0tex.Sample(s0, tc0.xy/tc0.w);
#endif // DX11
// texture stage 1 mode 0 dot 0 input-stage 0
#ifndef DX11
    float4 tex1= tex2Dproj(s1, tc1);
#else
    float4 tex1= s1tex.Sample(s1, tc1.xy/tc1.w);
#endif // DX11
// texture stage 2 mode 0 dot 0 input-stage 0
#ifndef DX11
    float4 tex2= tex2Dproj(s2, tc2);
#else
    float4 tex2= s2tex.Sample(s2, tc2.xy/tc2.w);
#endif // DX11
// texture stage 3 mode 0 dot 0 input-stage 0
#ifndef DX11
    float4 tex3= tex2Dproj(s3, tc3);
#else
    float4 tex3= s3tex.Sample(s3, tc3.xy/tc3.w);
#endif // DX11
    // exp.components=1 term=1
    // line 24: R0= EXPAND(T2).EXPAND(D1)
    float temp0;
    float3 temp1;
    temp1= 2 * saturate(tex2.rgb) - 1;
    float3 temp2;
    float3 temp3;
    temp3= 2 * saturate(color1.rgb) - 1;
    float3 temp4;
    float temp5;
    temp5= dot(temp1, temp3);
    temp0= temp5;
    temp0= 2 * temp0;
    // exp.components=3 term=3
    // line 25: T0= OUT_SCALE_BY_2(T0*T1)
    float3 temp6;
    float3 temp7;
    temp7= saturate(tex0.rgb);
    float3 temp8;
    float3 temp9;
    temp9= saturate(tex1.rgb);
    float3 temp10;
    float3 temp11;
    temp11= temp7 * temp9;
    temp6= temp11;
    temp6= 2 * temp6;
    // exp.components=1 term=1
    // line 26: T1a= T1a*T0a
    float temp12;
    float temp13;
    temp13= saturate(tex1.a);
    float3 temp14;
    float temp15;
    temp15= saturate(tex0.a);
    float3 temp16;
    float temp17;
    temp17= temp13 * temp15;
    temp12= temp17;
    r0.rgb= clamp(temp0,-1,+1);
    tex0.rgb= clamp(temp6,-1,+1);
    tex1.a= clamp(temp12,-1,+1);
    // exp.components=1 term=1 term=1
    // line 29: D1a= D1a*SIGNED(R0b) - D1a*SIGNED(D1b)
    float temp18;
    float temp19;
    float temp20;
    float temp21;
    temp21= saturate(color1.a);
    float3 temp22;
    float temp23;
    temp23= r0.b;
    float3 temp24;
    float temp25;
    temp25= temp21 * temp23;
    temp19= temp25;
    float temp26;
    temp26= saturate(color1.a);
    float3 temp27;
    float temp28;
    temp28= color1.b;
    float3 temp29;
    float temp30;
    temp30= temp26 * temp28;
    temp20= temp30;
    temp18= temp19 - temp20;
    color1.a= clamp(temp18,-1,+1);
    // exp.components=3 term=3 term=3
    // line 32: R0= T3 + T3*SIGNED(D1a)
    float3 temp31;
    float3 temp32;
    float3 temp33;
    float3 temp34;
    temp34= saturate(tex3.rgb);
    float3 temp35;
    temp32= temp34;
    float3 temp36;
    temp36= saturate(tex3.rgb);
    float3 temp37;
    float temp38;
    temp38= color1.a;
    float3 temp39;
    float3 temp40;
    temp40= temp36 * temp38;
    temp33= temp40;
    temp31= temp32 + temp33;
    r0.rgb= clamp(temp31,-1,+1);
    // exp.components=1 term=1
    // line 36: R1= R0.C1a
    float temp41;
    float3 temp42;
    temp42= saturate(r0.rgb);
    float3 temp43;
    float temp44;
    temp44= 0.752941;
    float3 temp45;
    float temp46;
    temp46= dot(temp42, temp44);
    temp41= temp46;
    temp41= 2 * temp41;
    // exp.components=3 term=3
    // line 37: R0= OUT_SCALE_BY_2(R0*T0)
    float3 temp47;
    float3 temp48;
    temp48= saturate(r0.rgb);
    float3 temp49;
    float3 temp50;
    temp50= saturate(tex0.rgb);
    float3 temp51;
    float3 temp52;
    temp52= temp48 * temp50;
    temp47= temp52;
    temp47= 2 * temp47;
    r1.rgb= clamp(temp41,-1,+1);
    r0.rgb= clamp(temp47,-1,+1);
    // exp.components=3 term=3
    // line 40: SRCCOLOR= R0
    float3 temp53;
    float3 temp54;
    temp54= saturate(r0.rgb);
    float3 temp55;
    temp53= temp54;
    // exp.components=1 term=1
    // line 41: SRCALPHA= 0
    float temp56;
    float temp57;
    temp57= 0;
    float3 temp58;
    temp56= temp57;
    r0.rgb= temp53;
    r0.a= temp56;

//fog zvalue
    float linear_depth = tc7.w / zwriteout.z;
    float3 depth_stripe;

    depth_stripe.r = floor(linear_depth*256)/256;
    depth_stripe.g = frac(floor(linear_depth*65536)/256);
    depth_stripe.b = frac(floor(linear_depth*65536*256)/256);

#ifdef ZPRIME
    //r0.a has alpha kill value
    r0.rgb = depth_stripe.rgb;
#endif

#ifdef ALPHA_TEST
#ifdef ALPHA_TEST_NOT_EQUAL
    clip(any(r0.a - ALPHA_TEST) - 0.5f);    
#elif ALPHA_TEST_GREATER
    clip(r0.a - ALPHA_TEST);        
    clip(any(r0.a - ALPHA_TEST) - 0.5f);    
#elif ALPHA_TEST_LESS
    clip(ALPHA_TEST - r0.a);
    clip(any(r0.a - ALPHA_TEST) - 0.5f);    
#endif
#endif // ALPHA_TEST

#ifndef MRT
    return r0;
#else
    MRT_return retval;
    retval.color = r0;
    retval.depth.rgb = depth_stripe.rgb;
    retval.depth.a = r0.a;
    return retval;
#endif
}
